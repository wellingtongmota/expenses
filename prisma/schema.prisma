generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags     Tag[] // Relacionamento: um usuário pode ter várias tags
  expenses Expense[] // Relacionamento: um usuário pode ter várias despesas
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  userId   String // ID do usuário que criou a tag
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[] // Relacionamento: uma tag pode estar associada a várias despesas
  color    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId]) // Garantir que o usuário não crie tags com nomes duplicados
}

model Expense {
  id           String      @id @default(cuid())
  description  String
  amount       Float
  dueDate      DateTime
  type         ExpenseType // Tipo de gasto: "À vista", "Parcelado", "Mensalidade"
  installments Int? // Número de parcelas (aplicável para gastos parcelados)
  frequency    Frequency? // Frequência de recorrência (aplicável para mensalidades)

  createdAt DateTime @default(now())
  userId    String // ID do usuário que criou o gasto
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId     String? // ID da tag associada ao gasto (opcional)
  tag       Tag?     @relation(fields: [tagId], references: [id], onDelete: SetNull)
}

// Enum para tipo de gasto
enum ExpenseType {
  ONE_TIME // À vista
  INSTALLMENTS // Parcelado
  RECURRING // Mensalidade
}

// Enum para frequência de recorrência
enum Frequency {
  MONTHLY // Mensal
  YEARLY // Anual
  WEEKLY // Semanal
}
